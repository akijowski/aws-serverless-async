openapi: 3.0.3
info:
  title: Async User API
  description: Async User API using AWS Serverless architecture
  version: 1.0.0
  contact:
    name: Adam Kijowski
    email: akijowski@twilio.com
externalDocs:
  description: Project repo
  url: 'https://github.com/akijowski/aws-serverless-async'
tags:
  - name: user
    description: user operations
paths:
  /status/{sqsMessageID}:
    parameters:
      - $ref: '#/components/parameters/SQSMessageIDPathParameter'
    get:
      tags:
        - user
      operationId: get-status-by-sqs-id
      summary: Get the User status by the SQS message ID
      description: Find the User ID in the DynamoDB database with the given SQS message ID
      responses:
        '200':
          $ref: '#/components/responses/UserStatusResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      # validate the request params
      x-amazon-apigateway-request-validator: params-only
      # Make a request to DynamoDB
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        passthroughBehavior: never
        credentials:
          Fn::GetAtt: ApiIamRole.Arn
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html
        # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html
        requestTemplates:
          'application/json': |
            {
              "TableName": "$stageVariables.TableName",
              "IndexName": "$stageVariables.MessageIDIndex",
              "KeyConditionExpression": "SQSMessageID = :pk",
              "ExpressionAttributeValues": {
                ":pk": {"S": "$util.escapeJavaScript($input.params('sqsMessageID'))" }
              },
              "Limit": 1,
              "ReturnedConsumedCapacity": "NONE"
            }

        responses:
          default:
            # MUST be a string to map to the OpenAPI operator response codes
            statusCode: '500'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"
          "2\\d{2}":
            statusCode: '200'
            responseTemplates:
              application/json: |
                #set($count = $input.path('$.Count'))
                ## This is a sample comment
                #if($count > 0)
                {
                  "userID": "$input.path('$.Items[0].ID.S')"
                }
                #else
                #set($context.responseOverride.status = 404)
                {
                  "message": "message ID not found, (count = $count)"
                }
                #end

          "4\\d{2}":
            statusCode: '400'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"
          "5\\d{2}":
            statusCode: '500'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"

  /users:
    post:
      tags:
        - user
      operationId: post-users
      summary: Create a new User
      description: Add a new User creation request to SQS
      requestBody:
        $ref: '#/components/requestBodies/UserCreationRequest'
      responses:
        '204':
          description: Successful creation response
          headers:
            X-SQS-Message-ID:
              description: The returned SQS Message ID
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      # validate the request body
      x-amazon-apigateway-request-validator: all
      # Pass the request body to SQS:SendMessage
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        passthroughBehavior: when_no_match
        credentials:
          Fn::GetAtt: ApiIamRole.Arn
        uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}/
            - QueueName:
                Fn::GetAtt:
                  UserCreationQueue.QueueName
        requestParameters:
          # https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
          # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html#API_SendMessage_RequestParameters
          "integration.request.querystring.Action": "'SendMessage'"
          "integration.request.querystring.MessageBody": "method.request.body"
        responses:
          default:
            # MUST be a string to map to the OpenAPI operator response codes
            statusCode: '500'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"
          "2\\d{2}":
            statusCode: '204'
            responseParameters:
              # Return the response message ID as a header
              # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html#API_SendMessage_ResponseElements
              # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-api-responses.html
              "method.response.header.X-SQS-Message-ID": "integration.response.body.SendMessageResponse.SendMessageResult.MessageId"
          "4\\d{2}":
            statusCode: '400'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"
          "5\\d{2}":
            statusCode: '500'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"

  /users/{userID}:
    parameters:
      - $ref: '#/components/parameters/UserIDPathParameter'
    get:
      tags:
        - user
      operationId: get-users-by-id
      summary: Retreive a User by ID
      description: Find the User in the DynamoDB database
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      # validate the request params
      x-amazon-apigateway-request-validator: params-only
      # Make a request to DynamoDB
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        passthroughBehavior: never
        credentials:
          Fn::GetAtt: ApiIamRole.Arn
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-integration-requestTemplates.html
        # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html
        requestTemplates:
          'application/json': |
            {
              "TableName": "$stageVariables.TableName",
              "Key": {
                "ID": {
                  "S": "$util.escapeJavaScript($input.params('userID'))"
                }
              },
              "ReturnedConsumedCapacity": "NONE"
            }

        responses:
          default:
            statusCode: '500'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"
          "2\\d{2}":
            statusCode: '200'
            responseTemplates:
              application/json: |
                #set($item = $input.path('$.Item'))
                #set($id = $item.ID.S)
                #if($id == "")
                #set($context.responseOverride.status = 404)
                {
                  "message": "User not found, (item = $item)"
                }
                #else
                {
                  "ID": "$id",
                  "name": "$item.Name.S",
                  "email": "$item.Email.S",
                  "createdAt": "$item.CreatedAt.S"
                }
                #end

          "4\\d{2}":
            statusCode: '400'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"
          "5\\d{2}":
            statusCode: '500'
            responseTemplates:
              application/json:
                "#set ($root=$input.path('$')) { \"message\": \"$root\" }"

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true

components:
  parameters:
    UserIDPathParameter:
      name: userID
      in: path
      required: true
      schema:
        type: string
    SQSMessageIDPathParameter:
      name: sqsMessageID
      in: path
      required: true
      schema:
        type: string

  requestBodies:
    UserCreationRequest:
      description: A User creation request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCreation'

  responses:
    UserResponse:
      description: A User response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserStatusResponse:
      description: A User Status response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserStatus'

    ErrorResponse:
      description: a generic error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    UserCreation:
      description: A User creation body
      type: object
      properties:
        name:
          type: string
          minLength: 5
          description: the user's name
          example: John Doe
        email:
          type: string
          minLength: 3
          description: the user's email
          example: jane@email.com
      required:
        - name
        - email

    User:
      description: A User body
      type: object
      allOf:
        - $ref: '#/components/schemas/UserCreation'
      properties:
        ID:
          type: string
          minLength: 16
          description: user ID
          example: 99fd09ca-d9d3-4720-a9e2-48f999e9c1e2
        createdAt:
          type: string
          description: user creation time
          example: '2022-09-15T18:13:46.059963909Z'
      required:
        - ID
        - createdAt

    UserStatus:
      description: A User status body
      type: object
      properties:
        userID:
          type: string
          minLength: 16
          description: the matching User ID
          example: 99fd09ca-d9d3-4720-a9e2-48f999e9c1e2
      required:
        - userID

    Error:
      description: A generic error
      type: object
      properties:
        message:
          type: string
          description: the error message
          example: An unexpected error has occurred
      required:
        - message
