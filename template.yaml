AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-async-ref-arch-demo
  
  Reference architecture for an asynchronous REST API using serverless infrastructure

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Tracing: Active
    Architectures:
      - x86_64
    Runtime: go1.x
    AutoPublishAlias: Live
  Api:
    OpenApiVersion: 3.0.1
    TracingEnabled: True

Resources:
  UsersApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref 'AWS::StackName'
      Description: The REST API for the Users
      Mode: merge
      # AWS SAM will parse this OpenAPI spec for us and configure the API Gateway
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: reference/openapi.yaml
      StageName: live
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogsGroup.Arn
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference-access-logging-only
        Format: '{
            "caller": "$context.identity.caller",
            "httpMethod": "$context.httpMethod",
            "ip": "$context.identity.sourceIp",
            "protocol": "$context.protocol",
            "requestId": "$context.requestId",
            "requestTime":"$context.requestTime",
            "resourcePath":"$context.resourcePath",
            "responseLength":"$context.responseLength",
            "responseLatency": "$context.responseLatency",
            "status":"$context.status",
            "user":"$context.identity.user",
            "integration": {
              "error": "$context.integration.error",
              "status": "$context.integration.status",
              "requestId": "$context.integration.requestId",
              "latency": "$context.integration.latency"
            },
            "xrayTraceId": "$context.xrayTraceId"
          }'
      Variables:
        # In the table resource
        MessageIDIndex: SQSMessageIDToUserID
        TableName: !Ref UserTable
  ApiAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigw/${AWS::StackName}-access'
      RetentionInDays: 5
  ApiIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-api-role'
      Description: !Sub 'Service Role for ${AWS::StackName} API'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: SQSSenderPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource:
                  - !GetAtt UserCreationQueue.Arn
        - PolicyName: DynamoDBReadPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                Resource:
                  - !GetAtt UserTable.Arn
                  - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserTable}/index/*'

  UserCreationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-user-creation'
      Description: Read messages from the queue and make users
      CodeUri: functions/createUser/
      Handler: createUser
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt UserCreationQueue.QueueName
        - DynamoDBWritePolicy:
            TableName: !Ref UserTable
      Events:
        NewUserCreation:
          Type: SQS
          Properties:
            Queue: !GetAtt UserCreationQueue.Arn
      Environment:
        Variables:
          DYNAMO_TABLE_NAME: !Ref UserTable
  UserCreationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-user-creation'
      RetentionInDays: 7

  UserCreationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-user-creation'

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref 'AWS::StackName'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: SQSMessageID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: SQSMessageIDToUserID
          KeySchema:
            - AttributeName: SQSMessageID
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
